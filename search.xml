<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>workflow</title>
    <url>/uncategorized/plan/plan/</url>
    <content><![CDATA[<h2 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h2><p>Workflow的src/kernel目录里，包含了以下独立的模块，基本都是C和简单C++语法实现的，没有复杂的语法，每一个模块都很小，都可以单独拿出来学习：</p>
<p>poller,可以学习如何使用epoll<br>thrdpool,经典线程池实现<br>msgqueue,消息队列实现<br>Communicator,异步网络通信器，包括了基本的目标管理和负载均衡<br>Executor,包含计算调度算法的执行器<br>IO_Service,异步文件IO</p>
]]></content>
  </entry>
  <entry>
    <title>Git的指令</title>
    <url>/uncategorized/%E7%AC%94%E8%AE%B0/git/</url>
    <content><![CDATA[<h2 id="Git的指令"><a href="#Git的指令" class="headerlink" title="Git的指令"></a>Git的指令</h2><ul>
<li>git init: 初始化git</li>
<li>git add : 添加所有文件到暂存区<ul>
<li>git add 文件名/文件夹: 添加指定文件到暂存区 </li>
<li>git add . : 添加当前目录下的所有文件到暂存区</li>
</ul>
</li>
<li>git commit -m “提交信息”: 提交暂存区到版本库</li>
<li>git log: 查看提交记录<ul>
<li>git log —oneline: 查看提交记录的简略信息</li>
</ul>
</li>
<li>git status: 查看当前工作区状态 </li>
<li>git reset —hard 版本号: 回滚到指定版本<ul>
<li>git reset —hard HEAD^: 回滚到上一个版本 </li>
</ul>
</li>
<li>git reflog: 查看所有操作记录</li>
<li>git branch ：查看当前版本库所有分支，绿色带*代表现在所处的分支</li>
<li>git branch 分支名  ：创建分支</li>
<li>git checkout 分支名 ：切换分支</li>
<li>git merge 目标分支名  ：将目标分支合并到当前分支</li>
<li>git branch -d 分支名  ：删除分支</li>
<li>git remote add origin <a href="https://github.com/username/repository.git">https://github.com/username/repository.git</a>: 添加远程仓库</li>
<li>git push origin master: 将本地仓库推送到远程仓库</li>
<li>git config —list : 查看配置信息</li>
<li>git config —global unset user.name : 删除全局配置信息重点user.name</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>OSTEP总结</title>
    <url>/uncategorized/%E7%AC%94%E8%AE%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9C%9F%E7%9B%B8%E8%BF%98%E5%8E%9F/</url>
    <content><![CDATA[<ul>
<li>内存中为什么要分段，操作系统真相还原说不分段无法让不同的程序同时访问相同的物理内存，但是给我虚拟地址最后还是回到了一样的物理内存啊<ul>
<li>“分段避免直接用物理地址，通过段基址+偏移量，让多个进程并发运行，逻辑地址映射不同物理地址，实现隔离。”</li>
<li>“分段因大小不固定产生碎片，分页用固定页面优化内存管理。”</li>
<li>例子：段基址0x1000+偏移0x100=物理0x1100，分段隔离进程</li>
</ul>
</li>
<li>物理地址，逻辑地址，有效地址，线性地址，虚拟地址的区别<ul>
<li><img src="{8D10284A-2E81-4060-A33D-74B0325B2F24}.png" alt="alt text"></li>
</ul>
</li>
<li>编译性语言与解释性语言<ul>
<li>编译型 <ul>
<li>过程：<br>  预处理：处理头文件、宏（#include展开）。<br>  编译：源代码（C/C++）一次性翻译成汇编代码（.s文件，比如mov eax, 1）。<br>  汇编：汇编器（as/nasm）把汇编代码转成机器码（目标文件，.o）。<br>  链接：链接器（ld）把多个目标文件和库合成可执行文件（.exe）。<br>  运行时，OS加载机器码，CPU直接执行</li>
</ul>
</li>
<li>解释型<ul>
<li>过程<br>  解释器逐行读取源代码。<br>  每行直接翻译成机器码（或中间表示后转机器码），交给CPU执行。<br>  不生成独立文件，下行接着译。 </li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
</search>
