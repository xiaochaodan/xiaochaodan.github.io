<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>演示</title>
    <url>/2025/01/01/%E4%BB%A3%E7%A0%81%E5%9D%97/%E6%BC%94%E7%A4%BA/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入三个数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; c)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;最大值为：&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;最大值为：&quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (b &gt; c)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;最大值为：&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;最大值为：&quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>stl</title>
    <url>/2025/02/08/stl/</url>
    <content><![CDATA[<h1 id="STL-以前做过，但是删了，觉得浪费时间，现在看来，笔记还是好的"><a href="#STL-以前做过，但是删了，觉得浪费时间，现在看来，笔记还是好的" class="headerlink" title="STL(以前做过，但是删了，觉得浪费时间，现在看来，笔记还是好的)"></a>STL(以前做过，但是删了，觉得浪费时间，现在看来，笔记还是好的)</h1><h2 id="deque-queue-stack深入探索"><a href="#deque-queue-stack深入探索" class="headerlink" title="deque,queue,stack深入探索"></a>deque,queue,stack深入探索</h2><ul>
<li>deque如何模拟连续空间:通过操作符重载让其与连续空间的算法相同，但是操作符做的工作不同，例如:++，–，*，-&gt;,-,-&#x3D;,+&#x3D;,[]</li>
<li>操作符重载前++与后++:后++调用前++，前++有&amp;(–一样)</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">self &amp; <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">    ++cur;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">self <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">    self temp=*<span class="keyword">this</span>;</span><br><span class="line">    ++*<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>queue,stack的底层容器是deque,这两个不允许遍历，不会提供iterator，只能从头或尾拿数据</li>
<li>queue，stack可以作为底层结构:list,vector(queue不行)</li>
</ul>
<h2 id="RB-tree深入探索"><a href="#RB-tree深入探索" class="headerlink" title="RB-tree深入探索"></a>RB-tree深入探索</h2><ul>
<li>是map,set的底层</li>
</ul>
<h2 id="set-multiset深入探索"><a href="#set-multiset深入探索" class="headerlink" title="set,multiset深入探索"></a>set,multiset深入探索</h2><ul>
<li>set&#x2F;multiset基于rb-tree,key与value一样，因此它们是有序的，按照key来排序，multiset可以重复，其是调用rb-tree的insert_unique(),set是调用insert_equal()</li>
<li>set&#x2F;multimap:不可以使用iterator改变值,因为这个是const_iterators</li>
<li>可以视为rb-tree的适配器</li>
</ul>
<h2 id="map-multimap深入探索"><a href="#map-multimap深入探索" class="headerlink" title="map,multimap深入探索"></a>map,multimap深入探索</h2><ol>
<li>map&#x2F;multimap基于rb-tree,因此它们是有序的，按照key来排序，multimap可以重复，其是调用rb-tree的insert_unique(),map是调用insert_equal()</li>
<li>不可以使用iterator改变值,因为用了const key</li>
<li>map由operator[]multimap没有，如果存在key，则返回key对应的value，否则插入key，返回value的迭代器</li>
<li>lower_bound:找到第一个大于等于key的元素，返回迭代器，否则返回end()</li>
<li>upper_bound:找到第一个大于key的元素，返回迭代器，否则返回end()</li>
</ol>
<h2 id="hastable深入探索"><a href="#hastable深入探索" class="headerlink" title="hastable深入探索"></a>hastable深入探索</h2><ol>
<li>为应对碰撞使用链表（篮子）</li>
<li>哈希表的篮子数量是离53的倍数最近的素数</li>
<li>篮子个数大于元素个数</li>
</ol>
<h2 id="unordered容器概念"><a href="#unordered容器概念" class="headerlink" title="unordered容器概念"></a>unordered容器概念</h2><ol>
<li>c++11 hash_map,hash_set变为unordered_map,unordered_set</li>
</ol>
<h2 id="算法的形式"><a href="#算法的形式" class="headerlink" title="算法的形式"></a>算法的形式</h2><ol>
<li>从语法上来讲，算法algorithm是function template;容器container，迭代器iterator，仿函数function，适配器adapter，分配器allocator是class template</li>
</ol>
<h2 id="迭代器分类对算法的影响"><a href="#迭代器分类对算法的影响" class="headerlink" title="迭代器分类对算法的影响"></a>迭代器分类对算法的影响</h2><ol>
<li>typename ():临时对象</li>
<li>特化，偏特化，继承</li>
<li>迭代器(从下到上):<ol>
<li>输入迭代器（Input Iterators）</li>
<li>输出迭代器（Output Iterators）</li>
<li>前向迭代器（Forward Iterators）</li>
<li>双向迭代器（Bidirectional Iterators）</li>
<li>随机访问迭代器（Random Access Iterators）</li>
</ol>
</li>
</ol>
<h2 id="算法源码剖析"><a href="#算法源码剖析" class="headerlink" title="算法源码剖析"></a>算法源码剖析</h2><ol>
<li>count_if:</li>
<li>count:</li>
<li>accumulate:</li>
<li>for_each:</li>
<li>replace:</li>
<li>replace_if:</li>
<li>replace_copy:</li>
<li>sort:</li>
<li>find</li>
<li>find_if</li>
<li>binary_search</li>
</ol>
<h2 id="仿函数和函数对象"><a href="#仿函数和函数对象" class="headerlink" title="仿函数和函数对象"></a>仿函数和函数对象</h2><h2 id="存在多种adapter"><a href="#存在多种adapter" class="headerlink" title="存在多种adapter"></a>存在多种adapter</h2><ol>
<li>函数适配器binder2nd.mp4</li>
<li>函数适配器not1.mp</li>
<li>新型适配器bind.mp(将上面的两个取代了)<ol>
<li>占位符 _1,_2</li>
<li>bind可以绑定 function,function object,member functions,member data</li>
</ol>
</li>
<li>迭代器适配器reverse_iterator.mp4</li>
<li>迭代器适配器inserter</li>
<li>x(就是未知)适配器：ostream_iterator</li>
<li>x(就是未知)适配器：istream_iterator</li>
</ol>
<h2 id="一个万能的hash-function"><a href="#一个万能的hash-function" class="headerlink" title="一个万能的hash function"></a>一个万能的hash function</h2><ul>
<li>可变化的模板:<img src="/image.png" alt="alt text"></li>
</ul>
<h2 id="tuple-用例"><a href="#tuple-用例" class="headerlink" title="tuple 用例"></a>tuple 用例</h2><ul>
<li>tuple:指定任意的元素个数，任意类型</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">tuple&lt;<span class="type">int</span>,string,<span class="type">double</span>&gt; <span class="title">t1</span><span class="params">(<span class="number">1</span>,<span class="string">&quot;hello&quot;</span>,<span class="number">3.14</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(t1) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(t1) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(t1) &lt;&lt; endl;<span class="comment">//1 hello 3.14</span></span><br><span class="line"><span class="built_in">tie</span>(a,b,c) = t1;<span class="comment">//a=1,b=&quot;hello&quot;,c=3.14</span></span><br></pre></td></tr></table></figure>

<h2 id="type-traits"><a href="#type-traits" class="headerlink" title="type traits"></a>type traits</h2><ul>
<li>type traits:c++11中，type traits是c++11中新加入的特性，用于查询类型信息</li>
</ul>
<h2 id="cout"><a href="#cout" class="headerlink" title="cout"></a>cout</h2><ul>
<li>cout:操作符&lt;&lt;重载</li>
</ul>
<h2 id="movable元素对于一些容器的速度效能的影响"><a href="#movable元素对于一些容器的速度效能的影响" class="headerlink" title="movable元素对于一些容器的速度效能的影响"></a>movable元素对于一些容器的速度效能的影响</h2><h2 id="测试函数"><a href="#测试函数" class="headerlink" title="测试函数"></a>测试函数</h2>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/02/08/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
